plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.jk1.dependency-license-report' version '2.9'
}

group = 'com.github.figaf'
version = '2.9-IRT-5148-SNAPSHOT'

ext {
    enableSnapshotsForDependencyResolutionAndPublishing = project.findProperty('enableSnapshots') ?: 'false'
    snapshotsRepoUrl = project.findProperty('snapshotsRepoUrl') ?: ''
    snapshotsRepoUsername = project.findProperty('snapshotsRepoUsername') ?: ''
    snapshotsRepoPassword = project.findProperty('snapshotsRepoPassword') ?: ''

    lombokVersion = '1.18.34'
    integrationCommonsVersion = '2.11-IRT-5148-SNAPSHOT'
    integrationCommonsTestVersion = '2.3-IRT-5148-SNAPSHOT'
    snakeyamlVersion = '2.2'
    logbackVersion = "1.5.7"
    mapStructVersion = '1.6.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    if (enableSnapshotsForDependencyResolutionAndPublishing == 'true') {
        maven {
            url "$snapshotsRepoUrl/content/groups/public/"
            allowInsecureProtocol true
            credentials {
                username "$snapshotsRepoUsername"
                password "$snapshotsRepoPassword"
            }
        }
    }
    maven { url "https://jitpack.io" }
}

dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api "com.github.figaf:integration-commons:${integrationCommonsVersion}"

    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    implementation "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testImplementation "com.github.figaf:integration-commons-test:${integrationCommonsTestVersion}"
    testImplementation "org.yaml:snakeyaml:${snakeyamlVersion}"
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
}

java {
    withSourcesJar()
}

test {
    useJUnitPlatform()

    project.properties.each { propertyName, propertyValue ->
        if (!propertyName.startsWith("agent-test-data")) return

        systemProperty propertyName, propertyValue
    }

    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }

    maxHeapSize = "2G"
}

licenseReport {
    renderers = [
        new com.github.jk1.license.render.InventoryHtmlReportRenderer("report.html", "Backend")
    ]
    outputDir = "$projectDir/build/reports/licenses"
    configurations = ['runtimeClasspath']
    excludeBoms = true
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
    filters = [new com.github.jk1.license.filter.SpdxLicenseBundleNormalizer()]
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

jar {
    dependsOn "generateLicenseReport"

    from("${rootDir}/LICENSE") {
        into 'META-INF'
        rename { 'LICENSE.txt' }
    }

    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'License': 'MIT',
            'License-URL': 'https://opensource.org/licenses/MIT'
        )
    }
}

check {
    dependsOn "checkLicense"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                url = 'https://github.com/figaf/tpm-api'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def snapshotsRepoUrl = "$snapshotsRepoUrl/content/repositories/snapshots"
            url snapshotsRepoUrl
            allowInsecureProtocol true
            credentials {
                username snapshotsRepoUsername
                password snapshotsRepoPassword
            }
        }
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    doFirst {
        if (enableSnapshotsForDependencyResolutionAndPublishing != 'true') {
            throw new GradleException("It's not possible to perform publishing because property 'enableSnapshots' " +
                "is not configured or set to 'false'")
        }
        // Prevent release publishing
        if (!version.endsWith("-SNAPSHOT")) {
            throw new GradleException("Release publishing is not allowed, it's done by JitPack")
        }
    }
}